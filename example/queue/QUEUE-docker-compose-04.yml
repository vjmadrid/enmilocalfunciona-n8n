# Use Case: Queue Mode with resources

# *** N8N shared ***
# Project URL: https://github.com/n8n-io/n8n
# Docs URL: https://docs.n8n.io/
x-n8n: &service-n8n
  image: n8nio/n8n:1.82.1
  restart: always
  networks: ['demo']
  env_file:
      - ./config/n8n/n8n.env

services:

  # Project URL: https://github.com/postgres/postgres
  # Docs URL: https://www.postgresql.org/docs/16/index.html
  n8n-postgres:
    image: postgres:16
    container_name: "n8n-postgres"
    restart: always
    networks: ['demo']
    env_file:
      - ./config/postgres/postgres.env
    #environment:
      # *** Tunnings  ***
      # High performance and scalability
      # IMPORTANT: Depends on the host machine
      #- POSTGRES_WORK_MEM=64MB
      #- POSTGRES_SHARED_BUFFERS=2GB
      #- POSTGRES_MAINTENANCE_WORK_MEM=1GB
      #- POSTGRES_EFFECTIVE_CACHE_SIZE=2GB
      #- POSTGRES_MAX_PARALLEL_WORKERS=10
      #- POSTGRES_MAX_PARALLEL_WORKERS_PER_GATHER=5
    ports:
      - 5432:5432
    volumes:
      # *** Database Initializer ***
      - ./init-data.sh:/docker-entrypoint-initdb.d/init-data.sh
      # *** Volume configuration ***
      - ./postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U ${DB_POSTGRES_NON_ROOT_USER} -d ${DB_POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 10
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Project URL: https://github.com/redis/redis
  # Docs URL: https://redis.io/docs/latest/
  n8n-redis:
    #image: redis:7.2.7-alpine
    image: redis:7.4.2
    container_name: "n8n-redis"
    restart: always
    networks: ['demo']
    ports:
      - 6379:6379
    volumes:
      # *** Volume configuration ***
      - ./redis-data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 5s
      timeout: 5s
      retries: 10
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.2'
          memory: 256M


  # Project URL: https://github.com/n8n-io/n8n
  # Docs URL: https://docs.n8n.io/
  n8n-main:
    <<: *service-n8n
    ports:
      - 5678:5678
    volumes:
      # *** General configuration ***
      - /var/run/docker.sock:/var/run/docker.sock:ro # Access to Docker on host machine
      # *** Volume configuration ***
      - ./queue01-n8n-data/n8n:/home/node/.n8n
      - ./queue01-n8n-data/other:/home/node/
    depends_on:
      - n8n-postgres
      - n8n-redis
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 3G
        reservations:
          cpus: '1'
          memory: 2G

  n8n-worker:
    <<: *service-n8n
    command: ["worker"]
    depends_on:
      - n8n-main
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '1'
          memory: 1.5G
        reservations:
          cpus: '0.5'
          memory: 1G

volumes:
  postgres-data:
  redis-data:
  queue01-n8n-data:

networks:
  demo:
    name: demo
    driver: bridge